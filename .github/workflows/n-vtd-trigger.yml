name: N-VTD Banana

on:
  repository_dispatch:
    types:
      - vtd-trigger
      - n-v*

env:
  APP_NAME: "Vitadairy Loyalty"
  GIT_SSH_COMMAND: chmod 400 ${{ github.workspace }}/.github/data/key/id_rsa && ssh -i ${{ github.workspace }}/.github/data/key/id_rsa
  UTILS_SH: https://gist.githubusercontent.com/tuanngocptn/c3868a202e37479e42471a9217d810d9/raw/lbt_mb_ci_utils.sh
  BUILD_MATRIX: '[{"format":"ipa","name":"macos-14","platform":"ios"},{"format":"apk","name":"ubuntu-22.04","platform":"android"}]'
  BUILD_MATRIX_PRD: '[{"format":"ipa","name":"macos-14","platform":"ios"},{"format":"apk","name":"ubuntu-22.04","platform":"android"},{"format":"aab","name":"ubuntu-22.04","platform":"android"}]'

  BUILD_MATRIX_IOS: '[{"format":"ipa","name":"macos-15","platform":"ios"}]'
  BUILD_MATRIX_ANDROID: '[{"format":"apk","name":"ubuntu-22.04","platform":"android"}]'

  GH_PAT: ${{ secrets.GH_PAT }}
  REF_NAME: ${{ github.event.client_payload.ref_name }}
  TRIGGERING_ACTOR: ${{ github.event.client_payload.triggering_actor }}

  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_GROUP_ID: ${{ vars.TELEGRAM_GROUP_ID }}
  TELEGRAM_TOPIC_ID: ${{ vars.TELEGRAM_TOPIC_ID }}

jobs:
  init:
    name: Init
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.value }}
      env: ${{ steps.set-env.outputs.value }}
      message-information: ${{ steps.get-message-information.outputs.value }}
      app-version: ${{ steps.get-app-infomation.outputs.version-value }}
      app-build-number: ${{ steps.get-app-infomation.outputs.build-number-value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: VitaDairy/vtd-mb-vitadairy-loyalty
          token: ${{ secrets.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX="${{ toJson(env.BUILD_MATRIX) }}"
          if [[ "$REF_NAME" =~ "prd" ]]; then
            MATRIX="${{ toJson(env.BUILD_MATRIX_PRD) }}"
          fi
          # test ios
          MATRIX="${{ toJson(env.BUILD_MATRIX_ANDROID) }}"

          echo "value=$MATRIX" >> $GITHUB_OUTPUT

      - name: Set env
        id: set-env
        run: |
          ENV='dev'
          if [[ "$REF_NAME" =~ "prd" ]]; then
            ENV='prd'
          elif [[ "$REF_NAME" =~ "stg" ]]; then
            ENV='stg'
          fi
          echo "value=$ENV" >> $GITHUB_OUTPUT

      - name: Generate message
        id: get-message-information
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "value=$(get_message_information)" >> "$GITHUB_OUTPUT"

      - name: Generate app information
        id: get-app-infomation
        timeout-minutes: 1
        run: |
          source /dev/stdin <<<"$(curl -s ${{ env.UTILS_SH }})" 
          echo "version-value=$(get_version)" >> "$GITHUB_OUTPUT" 
          echo "build-number-value=$(get_build_number)" >> "$GITHUB_OUTPUT"

      - name: Send telegram message
        if: vars.IS_SILENT != 'true'
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: "ðŸŽ¬ -  Start build: ${{ steps.get-message-information.outputs.value }}"

      - name: Log value
        run: |
          echo "tag-source: $REF_NAME"
          echo "matrix: ${{ steps.set-matrix.outputs.value }}"
          echo "message-information: ${{ steps.get-message-information.outputs.value }}"
          echo "version: ${{ steps.get-app-infomation.outputs.version-value }}"
          echo "build number: ${{ steps.get-app-infomation.outputs.build-number-value }}"

      - name: Send message failure
        if: failure()
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: "ðŸ’¥ - Failure ${{ steps.get-message-information.outputs.value }}"

  deploy:
    name: Deployment ${{ matrix.format }}
    needs: [init]
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.init.outputs.matrix) }}
    runs-on: ${{ matrix.name }}
    env:
      APP_VARIANT: ${{ needs.init.outputs.env }}
      APP_VERSION: ${{ needs.init.outputs.app-version }}
      APP_BUILD_NUMBER: ${{ needs.init.outputs.app-build-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: VitaDairy/vtd-mb-vitadairy-loyalty
          token: ${{ secrets.GH_PAT }}
          ref: ${{ github.event.client_payload.ref_name}}

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Install fastlane plugins
        run: bundle exec fastlane install_plugins

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.4"
          channel: "stable"
      - run: flutter --version

      - name: Set up JDK
        uses: actions/setup-java@v4
        if: matrix.platform == 'android'
        with:
          java-version: 21
          distribution: "temurin"
          cache: "gradle"

      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Clean and install libs
        run: flutter clean && flutter pub get

      - name: Generate launcher icon
        run: flutter pub run flutter_launcher_icons:main

      - name: Check cache Pods
        if: matrix.format == 'IPA'
        id: cache-primes
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ios/Podfile.lock
          key: vtd-cache-pods-${{ hashFiles('pubspec.lock') }}

      - name: Pod install
        if: ${{ (matrix.format == 'IPA') && (steps.cache-primes.outputs.cache-hit != 'true') }}
        working-directory: ios
        run: bundle exec pod install

      # - name: Cache ios deriveddata
      #   uses: irgaly/xcode-cache@v1
      #   if: matrix.platform == 'ios'
      #   with:
      #     key: xcode-cache-deriveddata-${{ env.APP_VARIANT }}-${{ github.workflow }}-${{ github.sha }}
      #     restore-keys: xcode-cache-deriveddata-${{ env.APP_VARIANT }}-${{ github.workflow }}-

      - name: Install certificates
        run: bundle exec fastlane ${{ matrix.platform }} certificates

      - name: Update settings
        continue-on-error: true
        run: bundle exec fastlane ${{ matrix.platform }} update_settings

      - name: Update version and build number
        run: bundle exec fastlane ${{ matrix.platform }} update_version_and_build_number

      - name: Build ${{ matrix.format }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 60
          max_attempts: 2
          command: bundle exec fastlane ${{ matrix.platform }} build_${{ matrix.format }}

      - name: Deploy ${{ matrix.format }}
        run: bundle exec fastlane ${{ matrix.platform }} deploy_${{ matrix.format }}

      - name: Send telegram message
        if: vars.IS_SILENT != 'true'
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: "âœ… - Success ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}"

      - name: Send telegram message failure
        if: ${{ failure() && vars.IS_SILENT != 'true' }}
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic
          message: "ðŸ’¥ - Failure ${{ matrix.format }}: ${{ needs.init.outputs.message-information }}"

  # after-deployment:
  #   needs: [deploy]
  #   name: After Deployment
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         repository: ${{ secrets.VTD_REPOSITORY }}
  #         token: ${{ secrets.GH_PAT }}
  #         ref: ${{ github.event.client_payload.ref_name}}

  #     - name: Get environment full
  #       uses: dkershner6/switch-case-action@v1
  #       id: get-environment
  #       with:
  #         default: "debug"
  #         conditionals-with-values: |
  #           ${{ contains(env.REF_NAME, 'prd') }} => production
  #           ${{ contains(env.REF_NAME, 'stg') }} => staging
  #           ${{ contains(env.REF_NAME, 'dev') }} => development

  #     - name: Get version and build number
  #       id: get-version-sentry
  #       run: |
  #         source .github/scripts/utils.sh
  #         echo "value=$(get_sentry_version)" >> "$GITHUB_OUTPUT"
  #       timeout-minutes: 1

  #     - name: Log value
  #       run: |
  #         echo "Bundle identifier: ${{ steps.get-environment.outputs.value }}"
  #         echo "Version: ${{ steps.get-version-sentry.outputs.value  }}"

  #     - name: Create Sentry release
  #       uses: getsentry/action-release@v1
  #       if: ${{ steps.get-environment.outputs.value != 'debug' }}
  #       env:
  #         SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #         SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  #         SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  #       with:
  #         set_commits: skip
  #         environment: ${{ steps.get-environment.outputs.value }}
  #         version: ${{ steps.get-version-sentry.outputs.value }}
